name: Go Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.18
    - name: Replace date string and version string
      run: |
        export VERSION=${{ github.ref_name }}
        export BUILD_TIME=`TZ=":Europe/Zurich" date`
        sed -i'.bak' "s/\$CI_VERSION/$VERSION/g" cf.go
        sed -i'.bak' "s/\$CI_BUILD_TIME/$BUILD_TIME/g" cf.go
    - name: Build
      run: |
        mkdir -p output
        GOOS=windows GOARCH=amd64 go build -o output/cf_windows_x64.exe
        GOOS=windows GOARCH=arm64 go build -o output/cf_windows_arm64.exe
        GOOS=linux GOARCH=amd64 go build -o output/cf_linux_x64
        GOOS=linux GOARCH=arm64 go build -o output/cf_linux_arm64
        GOOS=darwin GOARCH=amd64 go build -o output/cf_macos_x64
        GOOS=darwin GOARCH=arm64 go build -o output/cf_macos_arm64

    - name: Compress files
      run: |
        cp output/cf_windows_x64.exe ./cf.exe
        zip cf_windows_x64.zip ./cf.exe
        cp output/cf_windows_arm64.exe ./cf.exe
        zip cf_windows_arm64.zip ./cf.exe
        cp output/cf_linux_x64 ./cf
        zip cf_linux_x64.zip ./cf
        cp output/cf_linux_arm64 ./cf
        zip cf_linux_arm64.zip ./cf
        cp output/cf_macos_x64 ./cf
        zip cf_macos_x64.zip ./cf
        cp output/cf_macos_arm64 ./cf
        zip cf_macos_arm64.zip ./cf
    - name: Create Release
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Windows x64 Release Zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./cf_windows_x64.zip
        asset_name: cf_windows_x64.zip
        asset_content_type: application/zip
    - name: Upload Windows arm64 Release Zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./cf_windows_arm64.zip
        asset_name: cf_windows_arm64.zip
        asset_content_type: application/zip
    - name: Upload Linux x64 Release Zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./cf_linux_x64.zip
        asset_name: cf_linux_x64.zip
        asset_content_type: application/zip
    - name: Upload Linux arm64 Release Zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./cf_linux_arm64.zip
        asset_name: cf_linux_arm64.zip
        asset_content_type: application/zip
    - name: Upload macOS x64 Release Zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./cf_macos_x64.zip
        asset_name: cf_macos_x64.zip
        asset_content_type: application/zip
    - name: Upload macOS arm64 Release Zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./cf_macos_arm64.zip
        asset_name: cf_macos_arm64.zip
        asset_content_type: application/zip
